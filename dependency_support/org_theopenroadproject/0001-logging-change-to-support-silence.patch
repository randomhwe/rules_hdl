diff --git a/src/Main.cc b/src/Main.cc
index 4285d3850..638690e9c 100644
--- a/src/Main.cc
+++ b/src/Main.cc
@@ -124,6 +124,8 @@ int cmd_argc;
 char** cmd_argv;
 const char* log_filename = nullptr;
 const char* metrics_filename = nullptr;
+bool quiet_logs = false;
+bool silent_logs = false;
 
 static const char* init_filename = ".openroad";
 
@@ -262,6 +264,14 @@ int main(int argc, char* argv[])
     remove(metrics_filename);
   }
 
+  if (findCmdLineFlag(argc, argv, "-quiet")) {
+    quiet_logs = true;
+  }
+
+  if (findCmdLineFlag(argc, argv, "-silent")) {
+    silent_logs = true;
+  }
+
   cmd_argc = argc;
   cmd_argv = argv;
 #ifdef ENABLE_PYTHON3
@@ -485,6 +495,8 @@ static void showUsage(const char* prog, const char* init_filename)
   printf("  -log <file_name>      write a log in <file_name>\n");
   printf(
       "  -metrics <file_name>  write metrics in <file_name> in JSON format\n");
+  printf("  -quiet             only emit warnings and above to the console\n");
+  printf("  -silent            do not emit logs to console.\n");
   printf("  cmd_file              source cmd_file\n");
 }
 
diff --git a/src/OpenRoad.cc b/src/OpenRoad.cc
index 519c7a9e4..833bb0fef 100644
--- a/src/OpenRoad.cc
+++ b/src/OpenRoad.cc
@@ -103,6 +103,8 @@ extern int Upf_Init(Tcl_Interp* interp);
 // Main.cc set by main()
 extern const char* log_filename;
 extern const char* metrics_filename;
+extern const bool quiet_logs;
+extern const bool silent_logs;
 
 namespace ord {
 
@@ -182,7 +184,7 @@ void OpenRoad::init(Tcl_Interp* tcl_interp)
   tcl_interp_ = tcl_interp;
 
   // Make components.
-  logger_ = makeLogger(log_filename, metrics_filename);
+  logger_ = makeLogger(log_filename, metrics_filename, quiet_logs, silent_logs);
   db_->setLogger(logger_);
   sta_ = makeDbSta();
   verilog_network_ = makeDbVerilogNetwork();
diff --git a/src/utl/include/utl/Logger.h b/src/utl/include/utl/Logger.h
index c96abbe49..0f8511944 100644
--- a/src/utl/include/utl/Logger.h
+++ b/src/utl/include/utl/Logger.h
@@ -104,19 +104,33 @@ enum ToolId
       SIZE  // the number of tools, do not put anything after this
 };
 
+enum LogMode {
+  FULL,
+  QUIET,
+  SILENT,
+};
+
+
 class Logger
 {
  public:
   // Use nullptr if messages or metrics are not logged to a file.
   Logger(const char* filename = nullptr,
-         const char* metrics_filename = nullptr);
+         const char* metrics_filename = nullptr,
+         const bool quiet_logs = false, const bool silent_logs = false);
   ~Logger();
   static ToolId findToolId(const char* tool_name);
 
   template <typename... Args>
   inline void report(const std::string& message, const Args&... args)
   {
-    logger_->log(spdlog::level::level_enum::off, FMT_RUNTIME(message), args...);
+    spdlog::level::level_enum report_level = spdlog::level::level_enum::off;
+
+    if (log_mode_ == LogMode::QUIET || log_mode_ == LogMode::SILENT) {
+      report_level = spdlog::level::level_enum::info;
+    }
+
+    logger_->log(report_level, FMT_RUNTIME(message), args...);
   }
 
   // Do NOT call this directly, use the debugPrint macro  instead (defined
@@ -302,6 +316,7 @@ class Logger
   std::vector<spdlog::sink_ptr> sinks_;
   std::shared_ptr<spdlog::logger> logger_;
   std::stack<std::string> metrics_stages_;
+  LogMode log_mode_;
 
   // This matrix is pre-allocated so it can be safely updated
   // from multiple threads without locks.
diff --git a/src/utl/include/utl/MakeLogger.h b/src/utl/include/utl/MakeLogger.h
index 34fd71210..996982708 100644
--- a/src/utl/include/utl/MakeLogger.h
+++ b/src/utl/include/utl/MakeLogger.h
@@ -45,7 +45,8 @@ struct Tcl_Interp;
 
 namespace ord {
 
-utl::Logger* makeLogger(const char* log_filename, const char* metrics_filename);
+utl::Logger *makeLogger(const char *log_filename, const char *metrics_filename,
+                        const bool quiet_logs, const bool silent_logs);
 void initLogger(utl::Logger* logger, Tcl_Interp* tcl_interp);
 
 }  // namespace ord
diff --git a/src/utl/src/Logger.cpp b/src/utl/src/Logger.cpp
index e7afdc316..ee4929ee8 100644
--- a/src/utl/src/Logger.cpp
+++ b/src/utl/src/Logger.cpp
@@ -42,12 +42,14 @@
 #include "spdlog/sinks/basic_file_sink.h"
 #include "spdlog/sinks/stdout_color_sinks.h"
 #include "spdlog/spdlog.h"
+#include "spdlog/common.h"
+#include "spdlog/sinks/sink.h"
 
 namespace utl {
 
 int Logger::max_message_print = 1000;
 
-Logger::Logger(const char* log_filename, const char* metrics_filename)
+Logger::Logger(const char* log_filename, const char *metrics_filename, const bool quiet_logs, const bool silent_logs)
     : debug_on_(false)
 {
   // This ensures it is safe to update the message counters
@@ -55,7 +57,20 @@ Logger::Logger(const char* log_filename, const char* metrics_filename)
   static_assert(std::atomic<MessageCounter::value_type>::is_always_lock_free,
                 "message counter should be atomic");
 
-  sinks_.push_back(std::make_shared<spdlog::sinks::stdout_color_sink_mt>());
+  log_mode_ = LogMode::FULL;
+  auto stdout = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
+
+  if (quiet_logs) {
+    log_mode_ = LogMode::QUIET;
+    stdout->set_level(spdlog::level::warn);
+  }
+
+  if (silent_logs) {
+    log_mode_ = LogMode::SILENT;
+  } else {
+    sinks_.push_back(stdout);
+  }
+
   if (log_filename)
     sinks_.push_back(
         std::make_shared<spdlog::sinks::basic_file_sink_mt>(log_filename));
diff --git a/src/utl/src/MakeLogger.cpp b/src/utl/src/MakeLogger.cpp
index 942ee7999..2f20ea5da 100644
--- a/src/utl/src/MakeLogger.cpp
+++ b/src/utl/src/MakeLogger.cpp
@@ -47,9 +47,9 @@ namespace ord {
 
 using utl::Logger;
 
-Logger* makeLogger(const char* log_filename, const char* metrics_filename)
-{
-  return new Logger(log_filename, metrics_filename);
+Logger *makeLogger(const char *log_filename, const char *metrics_filename,
+                   const bool quiet_logs, const bool silent_logs) {
+  return new Logger(log_filename, metrics_filename, quiet_logs, silent_logs);
 }
 
 void initLogger(Logger* logger, Tcl_Interp* tcl_interp)
